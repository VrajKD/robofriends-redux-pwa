{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","components/Scrolling.js","components/CounterBtn.js","components/Header.js","container/App.js","container/actions.js","container/constants.js","serviceWorker.js","container/reducers.js","index.js"],"names":["Card","_this$props","this","props","name","email","react_default","a","createElement","className","src","concat","alt","React","Component","CardList","console","log","robots","cardArr","map","robot","i","components_Card","key","id","Search","type","placeholder","onChange","searchChange","Scrolling","style","overflowY","height","children","CounterBtn","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","padding","background","marginBottom","onClick","PureComponent","Header","components_CounterBtn","App","onRequestRobots","searchField","onSearchChange","isPending","filterBots","filter","toLowerCase","indexOf","components_Header","components_Search","components_Scrolling","components_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRequest","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_container_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6cd913c9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Card extends React.Component {\r\n    render() {\r\n        const { name, email } = this.props;\r\n        return (\r\n            <div className=\"dib pa3 bg-washed-blue ma3 br4 grow bw2 shadow-5 tc\">\r\n                <img src={`https://robohash.org/${name}?200x200&set=set1`} alt='robot' />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p> {email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n// import { robots } from './robots';\r\n\r\nclass CardList extends React.Component {\r\n    render() {\r\n        console.log('CardList');\r\n        const robots = this.props.robots;\r\n        const cardArr = robots.map((robot, i) => {\r\n            return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n        })\r\n        return (<div>\r\n            {cardArr}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nclass Search extends React.Component {\r\n    render() {\r\n        console.log('Search');\r\n        return (\r\n            <div className=\"ma2\">\r\n                <input type=\"text\" placeholder=\"Search here for robots\" className=\"pa3 bw1 br3 b--black-40 bg-washed-blue mb3 tc\" onChange={this.props.searchChange} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nclass Scrolling extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style={{ overflowY: 'scroll', height: '600px' }}>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Scrolling;","import React from 'react';\r\n\r\nclass CounterBtn extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    // shouldComponentUpdate = (nextProps, nextState) => {\r\n    //     console.log(nextProps, nextState);\r\n    //     if (this.state.count !== nextState.count)\r\n    //         return true;\r\n    //     return false;\r\n    // }\r\n\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {\r\n                count: this.state.count + 1\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterBtn');\r\n        return (<button style={{ padding: '8px', background: 'honeydew', marginBottom: '10px' }} onClick={this.updateCount}>Count: {this.state.count}</button>);\r\n    }\r\n}\r\n\r\nexport default CounterBtn;\r\n","import React from 'react';\r\nimport CounterBtn from './CounterBtn';\r\nclass Header extends React.Component {\r\n    // shouldComponentUpdate() {\r\n    //     return false;\r\n    // }\r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">RoboFriend Finder</h1>\r\n                <CounterBtn />\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Search from '../components/Search';\r\n// import { robots } from './robots';\r\nimport Scrolling from \"../components/Scrolling\";\r\nimport Header from '../components/Header';\r\nimport './App.css'\r\n// import AsyncComponent from './AsyncComponent';\r\nimport { connect } from 'react-redux'\r\nimport { setSearchField, fetchRobots } from './actions'\r\n\r\nconst mapStateToProps = state => {\r\n    // console.log('mapStateToProps', state);\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: (event) => dispatch(fetchRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //     }\r\n    // this.onSearchChange = this.onSearchChange.bind(this);\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filterBots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().indexOf(searchField.toLowerCase()) !== -1;\r\n        }\r\n        )\r\n\r\n        return (\r\n            <div className=\"tc\">\r\n                <div className=\"shadow-5\">\r\n                    <Header />\r\n                    <Search searchChange={onSearchChange} />\r\n                </div>\r\n                <Scrolling>\r\n                    {isPending ? <h1>Loading</h1> :\r\n                        <CardList robots={filterBots} />\r\n                    }\r\n                </Scrolling>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING,\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const fetchRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING,\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default: return state;\r\n    }\r\n}\r\nconst initialStateRequest = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const requestRobots = (state = initialStateRequest, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import Card from './Card';\n// import CardList from './CardList';\n// import { robots } from './robots.js';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './container/reducers';\n// import { createLogger } from 'redux-logger';\n\nconst rootReducer = combineReducers({ searchRobots: searchRobots, requestRobots: requestRobots });\n\n// const logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}